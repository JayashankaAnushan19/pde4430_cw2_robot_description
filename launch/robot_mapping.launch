<launch>
      <!-- URDF file path -->
      <param name="robot_description" textfile="$(find pde4430_cw2_robot_description)/urdf/myrobot_with_sensor.urdf" /> 

      <!-- Spawn an empty Gazebo world -->
      <include file="$(find gazebo_ros)/launch/empty_world.launch"> 
      </include>

      <!-- <include file="$(find pde4430_cw2_robot_description)/launch/assessment_world.launch" /> -->
      <!-- <include file="$(find pde4430_cw2_robot_description)/launch/objects.launch" /> -->
 
      <!-- Static transform publisher (base_link to base_footprint) -->
      <node name="tf_footprint_base" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 base_link base_footprint 40" /> 

      <!-- Spawn robot model in Gazebo -->
      <!-- <node name="spawn_myrobot" pkg="gazebo_ros" type="spawn_model" args="-file $(find pde4430_cw2_robot_description)/urdf/myrobot.urdf -urdf -model pde4430_cw2_robot_description" output="screen" /> -->
      <node name="spawn_myrobot" pkg="gazebo_ros" type="spawn_model" args="-file $(find pde4430_cw2_robot_description)/urdf/myrobot_with_sensor.urdf -urdf -model pde4430_cw2_robot_description" output="screen" />

      <!-- Load and launch the Joint Controller -->
      <rosparam file="$(find pde4430_cw2_robot_description)/config/joint_controller.yaml" command="load"/>   
      
      <!-- <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="robot_wheel_controller robot_gripper_controller joint_state_controller" /> -->
      <!-- <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="robot_wheel_controller robot_gripper_controller joint_state_controller" /> -->
      <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="robot_wheel_controller robot_gripper_controller" />

      <!-- Robot State Publisher for TF of each joint -->
      <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/> 

      <!-- Load the lidar driver or simulation -->
      <!-- <node name="hokuyo_node" pkg="urg_node" type="urg_node" output="screen">
            <param name="frame_id" value="lidar"/>
      </node> -->


      <!-- $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ -->
      <!-- $$$$$$$$   Below code related to hector mapping  $$$$$$$$$$$$$$$$$$$$$$$$$$ -->
      <!-- $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ -->

      <arg name="tf_map_scanmatch_transform_frame_name" default="scanmatcher_frame"/>
      <arg name="base_frame" default="chassy"/> 
      <arg name="odom_frame" default="chassy"/>
      <arg name="pub_map_odom_transform" default="true"/>
      <arg name="scan_subscriber_queue_size" default="5"/>
      <arg name="scan_topic" default="scan"/>
      <arg name="map_size" default="2048"/>
    
      <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
        
          <!-- Frame names -->
          <param name="map_frame" value="map" />
          <param name="base_frame" value="$(arg base_frame)" />
          <param name="odom_frame" value="$(arg odom_frame)" />
        
          <!-- Tf use -->
          <param name="use_tf_scan_transformation" value="true"/>
          <param name="use_tf_pose_start_estimate" value="false"/>
          <param name="pub_map_odom_transform" value="$(arg pub_map_odom_transform)"/>
        
          <!-- Map size / start point -->
          <param name="map_resolution" value="0.050"/>
          <param name="map_size" value="$(arg map_size)"/>
          <param name="map_start_x" value="0.5"/>
          <param name="map_start_y" value="0.5" />
          <param name="map_multi_res_levels" value="2" />
        
          <!-- Map update parameters -->
          <param name="update_factor_free" value="0.4"/>
          <param name="update_factor_occupied" value="0.9" />    
          <param name="map_update_distance_thresh" value="0.4"/>
          <param name="map_update_angle_thresh" value="0.06" />
          <param name="laser_z_min_value" value = "-1.0" />
          <param name="laser_z_max_value" value = "1.0" />
        
          <!-- Advertising config --> 
          <param name="advertise_map_service" value="true"/>
        
          <param name="scan_subscriber_queue_size" value="$(arg scan_subscriber_queue_size)"/>
          <param name="scan_topic" value="$(arg scan_topic)"/>
        
          <!-- Debug parameters -->
          <!--
          <param name="output_timing" value="false"/>
          <param name="pub_drawings" value="true"/>
          <param name="pub_debug_output" value="true"/>
        -->
          <param name="tf_map_scanmatch_transform_frame_name" value="$(arg tf_map_scanmatch_transform_frame_name)" />
      </node>
        
      <!--<node pkg="tf" type="static_transform_publisher" name="map_nav_broadcaster" args="0 0 0 0 0 0 map nav 100"/>-->
      <node pkg="tf" type="static_transform_publisher" name="base_to_laser_broadcaster" args="0 0 0 0 0 0 chassy laser 100" />
      
</launch>